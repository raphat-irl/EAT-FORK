//
//  DetailPresenter.swift
//  EAT&FORK
//
//  Created by MacbookAir M1 FoodStory on 12/1/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol DetailPresentationLogic
{
  func presentBasketUI(response: Detail.calculateBasketUI.Response)
  func presentMenuUI(response: Detail.setUpUI.Response)
  func presentAddtoBasket(response: Detail.addToBasket.Response)
  func presentIncreaseButton(response: Detail.increaseButton.Response)
}

class DetailPresenter: DetailPresentationLogic
{
  weak var viewController: DetailDisplayLogic?
  
  // MARK: Do something
  
    func presentBasketUI(response: Detail.calculateBasketUI.Response)
  {
      let viewModel = Detail.calculateBasketUI.ViewModel(basketPriceLabelText:
                                                                "à¸¿\(String(response.menuSumPrice))",
                                                        basketmenuCountLabelText:                   String(response.menuSumQuantity))

      viewController?.displayBasketUI(viewModel: viewModel)
  }
    
    func presentMenuUI(response: Detail.setUpUI.Response)
    {
        let viewModel = Detail.setUpUI.ViewModel(menuImageURL: String(response.menuList?.image_url ?? ""),
                                                 totalPriceLabelText: String(response.menuList?.price ?? 0),
                                                 menuNameLabelText: String(response.menuList?.name ?? ""),
                                                 menuDescLabelText: String(response.menuList?.desc ?? ""),
                                                 menuPriceLabelText: String(response.menuList?.price ?? 0))
        
        viewController?.displayMenuUI(viewModel: viewModel)
    }
    
    func presentAddtoBasket(response: Detail.addToBasket.Response){
        
        let viewModel = Detail.addToBasket.ViewModel(newMenu: response.newMenu, wantedQuantity: response.wantedQuantity)
        
        viewController?.displayaddToBasKet(viewModel: viewModel)
    }
    
    func presentIncreaseButton(response: Detail.increaseButton.Response){
        let viewModel = Detail.increaseButton.ViewModel(minusButtonIsEnabled: response.minusButtonIsEnabled,                                              wantedQuantity: response.wantedQuantity)
        
        viewController?.displayIncreaseButton(viewModel: viewModel)
    }
}
