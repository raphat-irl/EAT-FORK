//
//  PaymentViewController.swift
//  EAT&FORK
//
//  Created by MacbookAir M1 FoodStory on 14/1/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentDisplayLogic: class
{
    func displayCalculateMenu(viewModel: Payment.calculateMenu.ViewModel)
    func displayCalculateMenuFail(viewModel: Payment.calculateMenu.ViewModelFail)
}

protocol PaymentDelegate{
    func backToMain(data: [Main.MainModels.MenuQuantity])
}

class PaymentViewController: UIViewController, PaymentDisplayLogic
{
    var delegate: PaymentDelegate?
    
    @IBOutlet weak var backButton:UIButton!
    @IBOutlet weak var menuSumPriceLabel:UILabel!
    @IBOutlet weak var servicePriceLabel: UILabel!
    @IBOutlet weak var taxPriceLabel: UILabel!
    @IBOutlet weak var totalPriceLabel: UILabel!
    @IBOutlet weak var paidTotalPriceLabel:UILabel!
    @IBOutlet weak var paidButton: UIButton!
    
    @IBOutlet weak var PaymentView:UIView!
    
    @IBOutlet weak var menuView: UITableView!
    
    var menuSumPrice:Double = 0
    var serviceCost:Double = 0
    var taxCost:Double = 0
    var totalPrice:Double = 0
    
    var billPopUp: BillPopUpView!
    
    var addMenu: [Main.MainModels.MenuQuantity] = []
    
  var interactor: PaymentBusinessLogic?
  var router: (NSObjectProtocol & PaymentRoutingLogic & PaymentDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PaymentInteractor()
    let presenter = PaymentPresenter()
    let router = PaymentRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
      
    menuView.register(UINib(nibName: "PaymentTableViewCell", bundle: nil),
                        forCellReuseIdentifier: PaymentTableViewCell.identifier)
    
    calculateMenu()

    menuView.reloadData()
     
  }
    @IBAction func paidButtonTapped(_ sender: Any){
        
        setUpDimmingVIew()
        self.billPopUp = BillPopUpView(frame: self.view.frame)
        self.billPopUp.backToMainButton.addTarget(self, action: #selector(backToMainPopUpButtonTapped), for: .touchUpInside)
        self.view.addSubview(billPopUp)
    }
    
    @objc func backToMainPopUpButtonTapped(){
        self.billPopUp.removeFromSuperview()
        addMenu = []
        delegate?.backToMain(data: addMenu)
        router?.routeToMain()
    }
    
    @IBAction func backButtonTapped(_sender: UIButton!){
        router?.routeToMain()
        delegate?.backToMain(data: addMenu)
       
    }
    
    func setUpDimmingVIew() {
        let dimmingView = UIView()
        dimmingView.backgroundColor = .black
        dimmingView.alpha = 0.25
        dimmingView.frame = PaymentView.bounds
        PaymentView.addSubview(dimmingView)
    }
  
  func calculateMenu()
  {
    let request = Payment.calculateMenu.Request(addMenu: addMenu, menuSumPrice: menuSumPrice)
    interactor?.calculateMenu(request: request)
  }
  
  func displayCalculateMenu(viewModel: Payment.calculateMenu.ViewModel)
  {
      menuSumPriceLabel.text = viewModel.menuSumPriceLabelText
      servicePriceLabel.text = viewModel.servicePriceLabelText
      taxPriceLabel.text = viewModel.taxPriceLabelText
      totalPriceLabel.text = viewModel.totalPriceLabelText
      paidTotalPriceLabel.text = viewModel.paidTotalPriceLabelText
  }
    
    func displayCalculateMenuFail(viewModel: Payment.calculateMenu.ViewModelFail)
    {
        router?.routeToMain()
        delegate?.backToMain(data: viewModel.addMenu)
    }
    
  
}

extension PaymentViewController:UITableViewDataSource,UITableViewDelegate{

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return addMenu.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: PaymentTableViewCell.identifier, for: indexPath as IndexPath) as? PaymentTableViewCell else {
            return UITableViewCell()
        }
        let menuAddObj = addMenu[indexPath.row]
        cell.setPaymentCell(menu: menuAddObj)

        return cell
    }

    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)
            -> UISwipeActionsConfiguration? {
                let deleteAction = UIContextualAction(style: .destructive, title: "ลบเมนู") { [self] (_, _, completionHandler) in
                
                tableView.beginUpdates()
                addMenu.remove(at:indexPath.row)
                tableView.deleteRows(at: [indexPath], with: .fade)
                tableView.endUpdates()
                
                menuSumPrice = 0
                menuView.reloadData()
                calculateMenu()
                completionHandler(true)
                    
            }
            deleteAction.backgroundColor = .systemRed
            let configuration = UISwipeActionsConfiguration(actions: [deleteAction])
            return configuration
    }
}
